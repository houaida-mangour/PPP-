import { FetchEsque, MaybeUrl, Either, SerializedUploadThingError, Time, MaybePromise, ExtendObjectIf } from '@uploadthing/shared';
export { EndpointMetadata, ExpandedRouteConfig } from '@uploadthing/shared';
import { FileRouter, inferEndpointInput } from '../internal/types.js';
export { FileRouter, inferEndpointInput, inferEndpointOutput, inferErrorShape } from '../internal/types.js';
import { Blob as Blob$1 } from 'buffer';
import * as S from '@effect/schema/Schema';

/**
 * All the public log levels users can set.
 */
type LogLevel = "error" | "warn" | "info" | "debug" | "trace";

interface UTApiOptions {
    /**
     * Provide a custom fetch function.
     * @default globalThis.fetch
     */
    fetch?: FetchEsque;
    /**
     * Provide a custom UploadThing API key.
     * @default process.env.UPLOADTHING_SECRET
     */
    apiKey?: string;
    /**
     * @default "info"
     */
    logLevel?: LogLevel;
    /**
     * Set the default key type for file operations. Allows you to set your preferred filter
     * for file keys or custom identifiers without needing to specify it on every call.
     * @default "fileKey"
     */
    defaultKeyType?: "fileKey" | "customId";
}
type UrlWithOverrides = {
    url: MaybeUrl;
    name?: string;
    customId?: string;
};
type BlobEsque = Blob$1 | Blob;
type FileEsque = BlobEsque & {
    name: string;
    customId?: string | null | undefined;
};
type UploadFileResult = Either<UploadedFileData, SerializedUploadThingError>;
interface KeyTypeOptionsBase {
    /**
     * Whether the provided key is a fileKey or a custom identifier. fileKey is the
     * identifier you get from UploadThing after uploading a file, customId is a
     * custom identifier you provided when uploading a file.
     * @default fileKey
     */
    keyType?: "fileKey" | "customId";
}
interface DeleteFilesOptions extends KeyTypeOptionsBase {
}
interface GetFileUrlsOptions extends KeyTypeOptionsBase {
}
interface ListFilesOptions {
    limit?: number;
    offset?: number;
}
type KeyRename = {
    key: string;
    newName: string;
};
type CustomIdRename = {
    customId: string;
    newName: string;
};
type RenameFileUpdate = KeyRename | CustomIdRename;
interface GetSignedURLOptions extends KeyTypeOptionsBase {
    /**
     * How long the URL will be valid for.
     * - Must be positive and less than 7 days (604800 seconds).
     * - You must accept overrides on the UploadThing dashboard for this option to be accepted.
     * @default app default on UploadThing dashboard
     */
    expiresIn?: Time;
}
interface ACLUpdateOptions extends KeyTypeOptionsBase {
}

declare const FileUploadData_base: S.Class<FileUploadData, {
    name: S.$String;
    size: S.$Number;
    type: S.$String;
}, {
    readonly name: string;
    readonly size: number;
    readonly type: string;
}, {
    readonly name: string;
    readonly size: number;
    readonly type: string;
}, never, {
    readonly name: string;
    readonly size: number;
    readonly type: string;
}, {}, {}>;
/**
 * =============================================================================
 * ======================== File Type Hierarchy ===============================
 * =============================================================================
 */
/**
 * Properties from the web File object, this is what the client sends when initiating an upload
 */
declare class FileUploadData extends FileUploadData_base {
}
declare const FileUploadDataWithCustomId_base: S.Class<FileUploadDataWithCustomId, {
    name: S.$String;
    size: S.$Number;
    type: S.$String;
} & {
    customId: S.NullOr<S.$String>;
}, {
    readonly name: string;
    readonly size: number;
    readonly type: string;
    readonly customId: string | null;
}, {
    readonly name: string;
    readonly size: number;
    readonly type: string;
    readonly customId: string | null;
}, never, {
    readonly name: string;
    readonly size: number;
    readonly type: string;
    readonly customId: string | null;
}, FileUploadData, {}>;
/**
 * `.middleware()` can add a customId to the incoming file data
 */
declare class FileUploadDataWithCustomId extends FileUploadDataWithCustomId_base {
}
declare const UploadedFileData_base: S.Class<UploadedFileData, {
    name: S.$String;
    size: S.$Number;
    type: S.$String;
} & {
    customId: S.NullOr<S.$String>;
} & {
    key: S.$String;
    url: S.$String;
}, {
    readonly name: string;
    readonly size: number;
    readonly type: string;
    readonly customId: string | null;
    readonly key: string;
    readonly url: string;
}, {
    readonly name: string;
    readonly size: number;
    readonly type: string;
    readonly customId: string | null;
    readonly key: string;
    readonly url: string;
}, never, {
    readonly name: string;
    readonly size: number;
    readonly type: string;
    readonly customId: string | null;
    readonly key: string;
    readonly url: string;
}, FileUploadDataWithCustomId, {}>;
/**
 * When files are uploaded, we get back a key and a URL for the file
 */
declare class UploadedFileData extends UploadedFileData_base {
}
/**
 * When the client has uploaded a file and polled for data returned by `.onUploadComplete()`
 */
interface ClientUploadedFileData<T> extends UploadedFileData {
    /**
     * Matches what's returned from the serverside `onUploadComplete` callback
     */
    readonly serverData: T;
}

type UploadFilesOptions<TRouter extends FileRouter, TEndpoint extends keyof TRouter, TSkipPolling extends boolean = false> = {
    /**
     * The files to upload
     */
    files: File[];
    /**
     * Called when presigned URLs have been retrieved and the file upload is about to begin
     */
    onUploadBegin?: ((opts: {
        file: string;
    }) => void) | undefined;
    /**
     * Called continuously as the file is uploaded to the storage provider
     */
    onUploadProgress?: ((opts: {
        file: string;
        progress: number;
    }) => void) | undefined;
    /**
     * Skip polling for server data after upload is complete
     * Useful if you want faster response times and don't need
     * any data returned from the server `onUploadComplete` callback
     * @default false
     */
    skipPolling?: TSkipPolling | undefined;
    /**
     * URL to the UploadThing API endpoint
     * @example URL { http://localhost:3000/api/uploadthing }
     * @example URL { https://www.example.com/api/uploadthing }
     * @remarks This option is not required when `uploadFiles` has been generated with `genUploader`
     */
    url: URL;
    /**
     * Set custom headers that'll get sent with requests
     * to your server
     */
    headers?: HeadersInit | (() => MaybePromise<HeadersInit>) | undefined;
    /**
     * The uploadthing package that is making this request, used to identify the client in the server logs
     * @example "@uploadthing/react"
     * @remarks This option is not required when `uploadFiles` has been generated with `genUploader`
     */
    package: string;
} & ExtendObjectIf<inferEndpointInput<TRouter[TEndpoint]>, {
    input: inferEndpointInput<TRouter[TEndpoint]>;
}>;
type GenerateUploaderOptions = {
    /**
     * URL to the UploadThing API endpoint
     * @example /api/uploadthing
     * @example URL { https://www.example.com/api/uploadthing }
     *
     * If relative, host will be inferred from either the `VERCEL_URL` environment variable or `window.location.origin`
     *
     * @default (VERCEL_URL ?? window.location.origin) + "/api/uploadthing"
     */
    url?: string | URL;
    /**
     * The uploadthing package that is making this request
     * @example "@uploadthing/react"
     *
     * This is used to identify the client in the server logs
     */
    package: string;
};

export { type ACLUpdateOptions, type ClientUploadedFileData, type DeleteFilesOptions, type FileEsque, FileUploadData, FileUploadDataWithCustomId, type GenerateUploaderOptions, type GetFileUrlsOptions, type GetSignedURLOptions, type ListFilesOptions, type RenameFileUpdate, type UTApiOptions, type UploadFileResult, type UploadFilesOptions, UploadedFileData, type UrlWithOverrides };
