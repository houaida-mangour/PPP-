import * as react_jsx_runtime from 'react/jsx-runtime';
import * as uploadthing_types from 'uploadthing/types';
import { FileRouter, inferEndpointOutput, ClientUploadedFileData, inferErrorShape, inferEndpointInput } from 'uploadthing/types';
import { MaybePromise, UploadThingError, ExtendObjectIf, ErrorMessage, StyleField, ContentField, ExpandedRouteConfig } from '@uploadthing/shared';
export * from '@uploadthing/dropzone/react';
export { useDropzone } from '@uploadthing/dropzone/react';

interface GenerateTypedHelpersOptions {
    /**
     * URL to the UploadThing API endpoint
     * @example "/api/uploadthing"
     * @example "https://www.example.com/api/uploadthing"
     *
     * If relative, host will be inferred from either the `VERCEL_URL` environment variable or `window.location.origin`
     *
     * @default (VERCEL_URL ?? window.location.origin) + "/api/uploadthing"
     */
    url?: string | URL;
}
type UseUploadthingProps<TRouter extends FileRouter, TEndpoint extends keyof TRouter, TSkipPolling extends boolean = false, TServerOutput = false extends TSkipPolling ? inferEndpointOutput<TRouter[TEndpoint]> : null> = {
    /**
     * Called when the upload is submitted and the server is about to be queried for presigned URLs
     * Can be used to modify the files before they are uploaded, e.g. renaming them
     */
    onBeforeUploadBegin?: ((files: File[]) => Promise<File[]> | File[]) | undefined;
    /**
     * Called when presigned URLs have been retrieved and the file upload is about to begin
     */
    onUploadBegin?: ((fileName: string) => void) | undefined;
    /**
     * Called continuously as the file is uploaded to the storage provider
     */
    onUploadProgress?: ((p: number) => void) | undefined;
    /**
     * Skip polling for server data after upload is complete
     * Useful if you want faster response times and don't need
     * any data returned from the server `onUploadComplete` callback
     * @default false
     */
    skipPolling?: TSkipPolling | undefined;
    /**
     * Called when the file uploads are completed
     * - If `skipPolling` is `true`, this will be called once
     *   all the files are uploaded to the storage provider.
     * - If `skipPolling` is `false`, this will be called after
     *   the serverside `onUploadComplete` callback has finished
     */
    onClientUploadComplete?: ((res: ClientUploadedFileData<TServerOutput>[]) => MaybePromise<void>) | undefined;
    /**
     * Called if the upload fails
     */
    onUploadError?: ((e: UploadThingError<inferErrorShape<TRouter>>) => MaybePromise<void>) | undefined;
    /**
     * Set custom headers that'll get sent with requests
     * to your server
     */
    headers?: HeadersInit | (() => MaybePromise<HeadersInit>) | undefined;
};
type UploadthingComponentProps<TRouter extends FileRouter, TEndpoint extends keyof TRouter, TSkipPolling extends boolean = false> = UseUploadthingProps<TRouter, TEndpoint, TSkipPolling> & {
    /**
     * The endpoint from your FileRouter to use for the upload
     */
    endpoint: TEndpoint;
    /**
     * URL to the UploadThing API endpoint
     * @example URL { /api/uploadthing }
     * @example URL { https://www.example.com/api/uploadthing }
     *
     * If relative, host will be inferred from either the `VERCEL_URL` environment variable or `window.location.origin`
     *
     * @default (VERCEL_URL ?? window.location.origin) + "/api/uploadthing"
     */
    url?: string | URL;
    config?: {
        mode?: "auto" | "manual";
        appendOnPaste?: boolean;
    };
} & ExtendObjectIf<inferEndpointInput<TRouter[TEndpoint]>, {
    /**
     * The input to the endpoint, as defined using `.input()` on the FileRouter endpoint
     * @see https://docs.uploadthing.com/api-reference/server#input
     */
    input: inferEndpointInput<TRouter[TEndpoint]>;
}>;

type ButtonStyleFieldCallbackArgs = {
    __runtime: "react";
    ready: boolean;
    isUploading: boolean;
    uploadProgress: number;
    fileTypes: string[];
};
type ButtonAppearance = {
    container?: StyleField<ButtonStyleFieldCallbackArgs>;
    button?: StyleField<ButtonStyleFieldCallbackArgs>;
    allowedContent?: StyleField<ButtonStyleFieldCallbackArgs>;
    clearBtn?: StyleField<ButtonStyleFieldCallbackArgs>;
};
type ButtonContent = {
    button?: ContentField<ButtonStyleFieldCallbackArgs>;
    allowedContent?: ContentField<ButtonStyleFieldCallbackArgs>;
    clearBtn?: ContentField<ButtonStyleFieldCallbackArgs>;
};
type UploadButtonProps<TRouter extends FileRouter, TEndpoint extends keyof TRouter, TSkipPolling extends boolean = false> = UploadthingComponentProps<TRouter, TEndpoint, TSkipPolling> & {
    /**
     * @see https://docs.uploadthing.com/theming#style-using-the-classname-prop
     */
    className?: string;
    /**
     * @see https://docs.uploadthing.com/theming#style-using-the-appearance-prop
     */
    appearance?: ButtonAppearance;
    /**
     * @see https://docs.uploadthing.com/theming#content-customisation
     */
    content?: ButtonContent;
};
/**
 * @remarks It is not recommended using this directly as it requires manually binding generics. Instead, use `createUploadButton`.
 * @example
 * <UploadButton<OurFileRouter, "someEndpoint">
 *   endpoint="someEndpoint"
 *   onUploadComplete={(res) => console.log(res)}
 *   onUploadError={(err) => console.log(err)}
 * />
 */
declare function UploadButton<TRouter extends FileRouter, TEndpoint extends keyof TRouter, TSkipPolling extends boolean = false>(props: FileRouter extends TRouter ? ErrorMessage<"You forgot to pass the generic"> : UploadButtonProps<TRouter, TEndpoint, TSkipPolling>): react_jsx_runtime.JSX.Element;

type DropzoneStyleFieldCallbackArgs = {
    __runtime: "react";
    ready: boolean;
    isUploading: boolean;
    uploadProgress: number;
    fileTypes: string[];
    isDragActive: boolean;
};
type DropzoneAppearance = {
    container?: StyleField<DropzoneStyleFieldCallbackArgs>;
    uploadIcon?: StyleField<DropzoneStyleFieldCallbackArgs>;
    label?: StyleField<DropzoneStyleFieldCallbackArgs>;
    allowedContent?: StyleField<DropzoneStyleFieldCallbackArgs>;
    button?: StyleField<DropzoneStyleFieldCallbackArgs>;
};
type DropzoneContent = {
    uploadIcon?: ContentField<DropzoneStyleFieldCallbackArgs>;
    label?: ContentField<DropzoneStyleFieldCallbackArgs>;
    allowedContent?: ContentField<DropzoneStyleFieldCallbackArgs>;
    button?: ContentField<DropzoneStyleFieldCallbackArgs>;
};
type UploadDropzoneProps<TRouter extends FileRouter, TEndpoint extends keyof TRouter, TSkipPolling extends boolean = false> = UploadthingComponentProps<TRouter, TEndpoint, TSkipPolling> & {
    /**
     * @see https://docs.uploadthing.com/theming#style-using-the-classname-prop
     */
    className?: string;
    /**
     * @see https://docs.uploadthing.com/theming#style-using-the-appearance-prop
     */
    appearance?: DropzoneAppearance;
    /**
     * @see https://docs.uploadthing.com/theming#content-customisation
     */
    content?: DropzoneContent;
    /**
     * Callback called when files are dropped or pasted.
     *
     * @param acceptedFiles - The files that were accepted.
     */
    onDrop?: (acceptedFiles: File[]) => void;
};
declare function UploadDropzone<TRouter extends FileRouter, TEndpoint extends keyof TRouter, TSkipPolling extends boolean = false>(props: FileRouter extends TRouter ? ErrorMessage<"You forgot to pass the generic"> : UploadDropzoneProps<TRouter, TEndpoint, TSkipPolling>): react_jsx_runtime.JSX.Element;

declare function Uploader<TRouter extends FileRouter, TEndpoint extends keyof TRouter, TSkipPolling extends boolean = false>(props: FileRouter extends TRouter ? ErrorMessage<"You forgot to pass the generic"> : UploadthingComponentProps<TRouter, TEndpoint, TSkipPolling>): react_jsx_runtime.JSX.Element;

declare const generateUploadButton: <TRouter extends FileRouter>(opts?: GenerateTypedHelpersOptions) => <TEndpoint extends keyof TRouter, TSkipPolling extends boolean = false>(props: Omit<UploadButtonProps<TRouter, TEndpoint, TSkipPolling>, keyof GenerateTypedHelpersOptions>) => react_jsx_runtime.JSX.Element;
declare const generateUploadDropzone: <TRouter extends FileRouter>(opts?: GenerateTypedHelpersOptions) => <TEndpoint extends keyof TRouter, TSkipPolling extends boolean = false>(props: Omit<UploadDropzoneProps<TRouter, TEndpoint, TSkipPolling>, keyof GenerateTypedHelpersOptions>) => react_jsx_runtime.JSX.Element;
declare const generateUploader: <TRouter extends FileRouter>(opts?: GenerateTypedHelpersOptions) => <TEndpoint extends keyof TRouter, TSkipPolling extends boolean = false>(props: Omit<UploadthingComponentProps<TRouter, TEndpoint, TSkipPolling>, keyof GenerateTypedHelpersOptions>) => react_jsx_runtime.JSX.Element;
/**
 * @deprecated - use {@link generateUploadButton}, {@link generateUploadDropzone}, and {@link generateUploader} instead
 */
declare function generateComponents<TRouter extends FileRouter>(initOpts?: GenerateTypedHelpersOptions): {
    UploadButton: <TEndpoint extends keyof TRouter, TSkipPolling extends boolean = false>(props: Omit<UploadButtonProps<TRouter, TEndpoint, TSkipPolling>, "url">) => react_jsx_runtime.JSX.Element;
    UploadDropzone: <TEndpoint_1 extends keyof TRouter, TSkipPolling_1 extends boolean = false>(props: Omit<UploadDropzoneProps<TRouter, TEndpoint_1, TSkipPolling_1>, "url">) => react_jsx_runtime.JSX.Element;
    Uploader: <TEndpoint_2 extends keyof TRouter, TSkipPolling_2 extends boolean = false>(props: Omit<UploadthingComponentProps<TRouter, TEndpoint_2, TSkipPolling_2>, "url">) => react_jsx_runtime.JSX.Element;
};

declare const generateReactHelpers: <TRouter extends FileRouter>(initOpts?: GenerateTypedHelpersOptions) => {
    readonly useUploadThing: <TEndpoint extends keyof TRouter, TSkipPolling extends boolean = false>(endpoint: TEndpoint, opts?: UseUploadthingProps<TRouter, TEndpoint, TSkipPolling> | undefined) => {
        readonly startUpload: (...args: undefined extends inferEndpointInput<TRouter[TEndpoint]> ? [files: File[], input?: inferEndpointInput<TRouter[TEndpoint]> & undefined] : [files: File[], input: inferEndpointInput<TRouter[TEndpoint]>]) => Promise<uploadthing_types.ClientUploadedFileData<false extends TSkipPolling ? uploadthing_types.inferEndpointOutput<TRouter[TEndpoint]> : null>[] | undefined>;
        readonly isUploading: boolean;
        readonly routeConfig: ExpandedRouteConfig | undefined;
        /**
         * @deprecated Use `routeConfig` instead
         */
        readonly permittedFileInfo: {
            slug: TEndpoint;
            config: ExpandedRouteConfig;
        } | undefined;
    };
    readonly uploadFiles: <TEndpoint_1 extends keyof TRouter, TSkipPolling_1 extends boolean = false>(endpoint: TEndpoint_1, opts: Omit<uploadthing_types.UploadFilesOptions<TRouter, TEndpoint_1, TSkipPolling_1>, keyof uploadthing_types.GenerateUploaderOptions>) => Promise<uploadthing_types.ClientUploadedFileData<false extends TSkipPolling_1 ? uploadthing_types.inferEndpointOutput<TRouter[TEndpoint_1]> : null>[]>;
    /**
     * Get the config for a given endpoint outside of React context.
     * @remarks Can only be used if the NextSSRPlugin is used in the app.
     */
    readonly getRouteConfig: (endpoint: keyof TRouter) => ExpandedRouteConfig;
};

export { type GenerateTypedHelpersOptions, UploadButton, UploadDropzone, Uploader, type UploadthingComponentProps, type UseUploadthingProps, generateComponents, generateReactHelpers, generateUploadButton, generateUploadDropzone, generateUploader };
