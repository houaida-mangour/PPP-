import * as uploadthing_types from 'uploadthing/types';
import { FileRouter, inferEndpointOutput, ClientUploadedFileData, inferErrorShape, inferEndpointInput } from 'uploadthing/types';
import { MaybePromise, UploadThingError, ExpandedRouteConfig } from '@uploadthing/shared';
export { useDropzone } from '@uploadthing/dropzone/react';

interface GenerateTypedHelpersOptions {
    /**
     * URL to the UploadThing API endpoint
     * @example "/api/uploadthing"
     * @example "https://www.example.com/api/uploadthing"
     *
     * If relative, host will be inferred from either the `VERCEL_URL` environment variable or `window.location.origin`
     *
     * @default (VERCEL_URL ?? window.location.origin) + "/api/uploadthing"
     */
    url?: string | URL;
}
type UseUploadthingProps<TRouter extends FileRouter, TEndpoint extends keyof TRouter, TSkipPolling extends boolean = false, TServerOutput = false extends TSkipPolling ? inferEndpointOutput<TRouter[TEndpoint]> : null> = {
    /**
     * Called when the upload is submitted and the server is about to be queried for presigned URLs
     * Can be used to modify the files before they are uploaded, e.g. renaming them
     */
    onBeforeUploadBegin?: ((files: File[]) => Promise<File[]> | File[]) | undefined;
    /**
     * Called when presigned URLs have been retrieved and the file upload is about to begin
     */
    onUploadBegin?: ((fileName: string) => void) | undefined;
    /**
     * Called continuously as the file is uploaded to the storage provider
     */
    onUploadProgress?: ((p: number) => void) | undefined;
    /**
     * Skip polling for server data after upload is complete
     * Useful if you want faster response times and don't need
     * any data returned from the server `onUploadComplete` callback
     * @default false
     */
    skipPolling?: TSkipPolling | undefined;
    /**
     * Called when the file uploads are completed
     * - If `skipPolling` is `true`, this will be called once
     *   all the files are uploaded to the storage provider.
     * - If `skipPolling` is `false`, this will be called after
     *   the serverside `onUploadComplete` callback has finished
     */
    onClientUploadComplete?: ((res: ClientUploadedFileData<TServerOutput>[]) => MaybePromise<void>) | undefined;
    /**
     * Called if the upload fails
     */
    onUploadError?: ((e: UploadThingError<inferErrorShape<TRouter>>) => MaybePromise<void>) | undefined;
    /**
     * Set custom headers that'll get sent with requests
     * to your server
     */
    headers?: HeadersInit | (() => MaybePromise<HeadersInit>) | undefined;
};

declare const generateReactHelpers: <TRouter extends FileRouter>(initOpts?: GenerateTypedHelpersOptions) => {
    readonly useUploadThing: <TEndpoint extends keyof TRouter, TSkipPolling extends boolean = false>(endpoint: TEndpoint, opts?: UseUploadthingProps<TRouter, TEndpoint, TSkipPolling> | undefined) => {
        readonly startUpload: (...args: undefined extends inferEndpointInput<TRouter[TEndpoint]> ? [files: File[], input?: inferEndpointInput<TRouter[TEndpoint]> & undefined] : [files: File[], input: inferEndpointInput<TRouter[TEndpoint]>]) => Promise<uploadthing_types.ClientUploadedFileData<false extends TSkipPolling ? uploadthing_types.inferEndpointOutput<TRouter[TEndpoint]> : null>[] | undefined>;
        readonly isUploading: boolean;
        readonly routeConfig: ExpandedRouteConfig | undefined;
        /**
         * @deprecated Use `routeConfig` instead
         */
        readonly permittedFileInfo: {
            slug: TEndpoint;
            config: ExpandedRouteConfig;
        } | undefined;
    };
    readonly uploadFiles: <TEndpoint_1 extends keyof TRouter, TSkipPolling_1 extends boolean = false>(endpoint: TEndpoint_1, opts: Omit<uploadthing_types.UploadFilesOptions<TRouter, TEndpoint_1, TSkipPolling_1>, keyof uploadthing_types.GenerateUploaderOptions>) => Promise<uploadthing_types.ClientUploadedFileData<false extends TSkipPolling_1 ? uploadthing_types.inferEndpointOutput<TRouter[TEndpoint_1]> : null>[]>;
    /**
     * Get the config for a given endpoint outside of React context.
     * @remarks Can only be used if the NextSSRPlugin is used in the app.
     */
    readonly getRouteConfig: (endpoint: keyof TRouter) => ExpandedRouteConfig;
};

export { generateReactHelpers };
